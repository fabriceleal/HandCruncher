exports.parser = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "program": parse_program,
        "handRaw": parse_handRaw,
        "date": parse_date,
        "handPresentation": parse_handPresentation,
        "tableType": parse_tableType,
        "tablePresentation": parse_tablePresentation,
        "seatPresentation": parse_seatPresentation,
        "postSBlind": parse_postSBlind,
        "postBBlind": parse_postBBlind,
        "postSBBB": parse_postSBBB,
        "postAnte": parse_postAnte,
        "card": parse_card,
        "cardlist_tail": parse_cardlist_tail,
        "cardlist": parse_cardlist,
        "boardlist_tail": parse_boardlist_tail,
        "boardlist": parse_boardlist,
        "board": parse_board,
        "isCapped": parse_isCapped,
        "action_atom": parse_action_atom,
        "action": parse_action,
        "streetHeader": parse_streetHeader,
        "streetName": parse_streetName,
        "street": parse_street,
        "summary_board": parse_summary_board,
        "mainPot": parse_mainPot,
        "sidePot": parse_sidePot,
        "potInfoLeft": parse_potInfoLeft,
        "potInfo": parse_potInfo,
        "summaryHeader": parse_summaryHeader,
        "summary": parse_summary,
        "preflopAction": parse_preflopAction,
        "preflop": parse_preflop,
        "hand": parse_hand,
        "game": parse_game,
        "stringLiteral": parse_stringLiteral,
        "currency": parse_currency,
        "currencySymbol": parse_currencySymbol,
        "stakes": parse_stakes,
        "CCusername": parse_CCusername,
        "username": parse_username,
        "usernamechar": parse_usernamechar,
        "tablename": parse_tablename,
        "tablenamechar": parse_tablenamechar,
        "digits": parse_digits,
        "number": parse_number,
        "value": parse_value,
        "wsNlStream": parse_wsNlStream,
        "wsNl": parse_wsNl,
        "ws": parse_ws,
        "nl": parse_nl
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "program";
      }
      
      var pos = { offset: 0, line: 1, column: 1, seenCR: false };
      var reportFailures = 0;
      var rightmostFailuresPos = { offset: 0, line: 1, column: 1, seenCR: false };
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function clone(object) {
        var result = {};
        for (var key in object) {
          result[key] = object[key];
        }
        return result;
      }
      
      function advance(pos, n) {
        var endOffset = pos.offset + n;
        
        for (var offset = pos.offset; offset < endOffset; offset++) {
          var ch = input.charAt(offset);
          if (ch === "\n") {
            if (!pos.seenCR) { pos.line++; }
            pos.column = 1;
            pos.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            pos.line++;
            pos.column = 1;
            pos.seenCR = true;
          } else {
            pos.column++;
            pos.seenCR = false;
          }
        }
        
        pos.offset += n;
      }
      
      function matchFailed(failure) {
        if (pos.offset < rightmostFailuresPos.offset) {
          return;
        }
        
        if (pos.offset > rightmostFailuresPos.offset) {
          rightmostFailuresPos = clone(pos);
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_program() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_wsNlStream();
        if (result0 !== null) {
          result2 = parse_handRaw();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_handRaw();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, hands) { return hands; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_handRaw() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_hand();
        if (result0 !== null) {
          result1 = parse_wsNlStream();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, h) { 
        			//parsed.emit('hand', h); 
        			return h;
        		})(pos0.offset, pos0.line, pos0.column, result0[0]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_date() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_number();
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 47) {
            result1 = "/";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"/\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_number();
            if (result2 !== null) {
              if (input.charCodeAt(pos.offset) === 47) {
                result3 = "/";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"/\"");
                }
              }
              if (result3 !== null) {
                result4 = parse_number();
                if (result4 !== null) {
                  if (input.charCodeAt(pos.offset) === 32) {
                    result5 = " ";
                    advance(pos, 1);
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\" \"");
                    }
                  }
                  if (result5 !== null) {
                    result6 = parse_number();
                    if (result6 !== null) {
                      if (input.charCodeAt(pos.offset) === 58) {
                        result7 = ":";
                        advance(pos, 1);
                      } else {
                        result7 = null;
                        if (reportFailures === 0) {
                          matchFailed("\":\"");
                        }
                      }
                      if (result7 !== null) {
                        result8 = parse_number();
                        if (result8 !== null) {
                          if (input.charCodeAt(pos.offset) === 58) {
                            result9 = ":";
                            advance(pos, 1);
                          } else {
                            result9 = null;
                            if (reportFailures === 0) {
                              matchFailed("\":\"");
                            }
                          }
                          if (result9 !== null) {
                            result10 = parse_number();
                            if (result10 !== null) {
                              if (input.substr(pos.offset, 3) === " ET") {
                                result11 = " ET";
                                advance(pos, 3);
                              } else {
                                result11 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\" ET\"");
                                }
                              }
                              if (result11 !== null) {
                                result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11];
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, year, month, day, hour, minute, second) { return { year:year, month:month, day:day, hour:hour, minute:minute, second:second}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[4], result0[6], result0[8], result0[10]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_handPresentation() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 17) === "PokerStars Hand #") {
          result0 = "PokerStars Hand #";
          advance(pos, 17);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"PokerStars Hand #\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_number();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 58) {
              result2 = ":";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\":\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_wsNlStream();
              if (result3 !== null) {
                result4 = parse_game();
                if (result4 !== null) {
                  result5 = parse_wsNlStream();
                  if (result5 !== null) {
                    if (input.charCodeAt(pos.offset) === 40) {
                      result6 = "(";
                      advance(pos, 1);
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"(\"");
                      }
                    }
                    if (result6 !== null) {
                      result7 = parse_stakes();
                      if (result7 !== null) {
                        if (input.charCodeAt(pos.offset) === 41) {
                          result8 = ")";
                          advance(pos, 1);
                        } else {
                          result8 = null;
                          if (reportFailures === 0) {
                            matchFailed("\")\"");
                          }
                        }
                        if (result8 !== null) {
                          result9 = parse_wsNlStream();
                          if (result9 !== null) {
                            if (input.charCodeAt(pos.offset) === 45) {
                              result10 = "-";
                              advance(pos, 1);
                            } else {
                              result10 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"-\"");
                              }
                            }
                            if (result10 !== null) {
                              result11 = parse_wsNlStream();
                              if (result11 !== null) {
                                result12 = parse_date();
                                if (result12 !== null) {
                                  result13 = parse_wsNlStream();
                                  if (result13 !== null) {
                                    result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13];
                                  } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                  }
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, n, g, l, d) { return { number:n, game:g, stakes:l, date:d}; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[4], result0[7], result0[12]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_tableType() {
        var result0;
        
        if (input.substr(pos.offset, 5) === "6-max") {
          result0 = "6-max";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"6-max\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 6) === "10-max") {
            result0 = "10-max";
            advance(pos, 6);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"10-max\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos.offset, 5) === "2-max") {
              result0 = "2-max";
              advance(pos, 5);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"2-max\"");
              }
            }
          }
        }
        return result0;
      }
      
      function parse_tablePresentation() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 7) === "Table '") {
          result0 = "Table '";
          advance(pos, 7);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"Table '\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_tablename();
          if (result1 !== null) {
            if (input.substr(pos.offset, 2) === "' ") {
              result2 = "' ";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"' \"");
              }
            }
            if (result2 !== null) {
              result3 = parse_tableType();
              if (result3 !== null) {
                if (input.substr(pos.offset, 7) === " Seat #") {
                  result4 = " Seat #";
                  advance(pos, 7);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\" Seat #\"");
                  }
                }
                if (result4 !== null) {
                  result5 = parse_number();
                  if (result5 !== null) {
                    if (input.substr(pos.offset, 14) === " is the button") {
                      result6 = " is the button";
                      advance(pos, 14);
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("\" is the button\"");
                      }
                    }
                    if (result6 !== null) {
                      result7 = parse_wsNlStream();
                      if (result7 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, table, type, buttonseat) { return { table:table, buttonseat:buttonseat, type:type}; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[3], result0[5]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_seatPresentation() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 5) === "Seat ") {
          result0 = "Seat ";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"Seat \"");
          }
        }
        if (result0 !== null) {
          result1 = parse_number();
          if (result1 !== null) {
            if (input.substr(pos.offset, 2) === ": ") {
              result2 = ": ";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\": \"");
              }
            }
            if (result2 !== null) {
              result3 = parse_username();
              if (result3 !== null) {
                result4 = parse_wsNlStream();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, seat, u) { 
        
        			for(var k in seatPresentationRegexes){
        				with(seatPresentationRegexes[k]){
        					var r = toRet(u.match(pattern), seat, u);
        					if(r !== null)
        						return r;
        				}
        			}
        
        			throw new Error("Invalid seat presentation! Matched '" + u + "' in (\"Seat \" seat:" + JSON.stringify(seat) + " \": \" u:username wsNlStream) (" + line + ", " + column + ")");
        			//return { seat:seat, name:u, stack:stack};
        		})(pos0.offset, pos0.line, pos0.column, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_postSBlind() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_username();
        if (result0 !== null) {
          if (input.substr(pos.offset, 20) === ": posts small blind ") {
            result1 = ": posts small blind ";
            advance(pos, 20);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\": posts small blind \"");
            }
          }
          if (result1 !== null) {
            result2 = parse_value();
            if (result2 !== null) {
              result3 = parse_wsNlStream();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, u, v) { return { tag:"postSBlind", value:v, user:u }; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_postBBlind() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_username();
        if (result0 !== null) {
          if (input.substr(pos.offset, 18) === ": posts big blind ") {
            result1 = ": posts big blind ";
            advance(pos, 18);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\": posts big blind \"");
            }
          }
          if (result1 !== null) {
            result2 = parse_value();
            if (result2 !== null) {
              result3 = parse_wsNlStream();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, u, v) { return { tag:"postBBlind", value:v, user:u }; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_postSBBB() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_username();
        if (result0 !== null) {
          if (input.substr(pos.offset, 27) === ": posts small & big blinds ") {
            result1 = ": posts small & big blinds ";
            advance(pos, 27);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\": posts small & big blinds \"");
            }
          }
          if (result1 !== null) {
            result2 = parse_value();
            if (result2 !== null) {
              result3 = parse_wsNlStream();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, u, v) { return { tag:"postSBBB", value:v, user:u }; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_postAnte() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_username();
        if (result0 !== null) {
          if (input.substr(pos.offset, 17) === ": posts the ante ") {
            result1 = ": posts the ante ";
            advance(pos, 17);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\": posts the ante \"");
            }
          }
          if (result1 !== null) {
            result2 = parse_value();
            if (result2 !== null) {
              result3 = parse_wsNlStream();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, u, v) { return { tag:"ante", value:v, user:u }; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_card() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (/^[2-9]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[2-9]");
          }
        }
        if (result0 === null) {
          if (/^[ATJQK]/.test(input.charAt(pos.offset))) {
            result0 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("[ATJQK]");
            }
          }
        }
        if (result0 !== null) {
          if (/^[schd]/.test(input.charAt(pos.offset))) {
            result1 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[schd]");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, rank, suit) { return { rank:rank, suit:suit}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_cardlist_tail() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_card();
        if (result0 !== null) {
          result1 = parse_wsNlStream();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, t) { return t; })(pos0.offset, pos0.line, pos0.column, result0[0]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_cardlist() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_card();
        if (result0 !== null) {
          result1 = parse_wsNlStream();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_cardlist_tail();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_cardlist_tail();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, h, t) { return [h].concat(t); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_boardlist_tail() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_boardlist();
        if (result0 !== null) {
          result1 = parse_wsNlStream();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, t) { return t; })(pos0.offset, pos0.line, pos0.column, result0[0]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_boardlist() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_board();
        if (result0 !== null) {
          result1 = parse_wsNlStream();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_boardlist_tail();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_boardlist_tail();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, h, t) { return [h].concat(t.reduce(function(i, t){ return (t.push(i), t); }, [])); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_board() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 91) {
          result0 = "[";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"[\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_card();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 93) {
              result2 = "]";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"]\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, h) { return h; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.charCodeAt(pos.offset) === 91) {
            result0 = "[";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"[\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_cardlist();
            if (result1 !== null) {
              if (input.charCodeAt(pos.offset) === 93) {
                result2 = "]";
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"]\"");
                }
              }
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, h) { return h; })(pos0.offset, pos0.line, pos0.column, result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_isCapped() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 21) === " and has reached the ") {
          result0 = " and has reached the ";
          advance(pos, 21);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\" and has reached the \"");
          }
        }
        if (result0 !== null) {
          result1 = parse_value();
          if (result1 !== null) {
            if (input.substr(pos.offset, 4) === " cap") {
              result2 = " cap";
              advance(pos, 4);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\" cap\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, cap) { return { tag:"cap", value:cap}; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_action_atom() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 5) === "folds") {
          result0 = "folds";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"folds\"");
          }
        }
        if (result0 !== null) {
          pos2 = clone(pos);
          result1 = parse_wsNlStream();
          if (result1 !== null) {
            result2 = parse_board();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = clone(pos2);
            }
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, showed) { return { tag:"fold", showed:(showed ? showed[1] : null)}; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          if (input.substr(pos.offset, 6) === "checks") {
            result0 = "checks";
            advance(pos, 6);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"checks\"");
            }
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column) { return { tag:"check"}; })(pos0.offset, pos0.line, pos0.column);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.substr(pos.offset, 4) === "bets") {
              result0 = "bets";
              advance(pos, 4);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"bets\"");
              }
            }
            if (result0 !== null) {
              result1 = parse_wsNlStream();
              if (result1 !== null) {
                result2 = parse_value();
                if (result2 !== null) {
                  if (input.substr(pos.offset, 14) === " and is all-in") {
                    result3 = " and is all-in";
                    advance(pos, 14);
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\" and is all-in\"");
                    }
                  }
                  result3 = result3 !== null ? result3 : "";
                  if (result3 !== null) {
                    result4 = parse_isCapped();
                    result4 = result4 !== null ? result4 : "";
                    if (result4 !== null) {
                      result0 = [result0, result1, result2, result3, result4];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, c, isAllin, isCapped) { return { tag:"bet", value:c, isAllin:(isAllin != false), isCapped:isCapped}; })(pos0.offset, pos0.line, pos0.column, result0[2], result0[3], result0[4]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              if (input.substr(pos.offset, 5) === "calls") {
                result0 = "calls";
                advance(pos, 5);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"calls\"");
                }
              }
              if (result0 !== null) {
                result1 = parse_wsNlStream();
                if (result1 !== null) {
                  result2 = parse_value();
                  if (result2 !== null) {
                    if (input.substr(pos.offset, 14) === " and is all-in") {
                      result3 = " and is all-in";
                      advance(pos, 14);
                    } else {
                      result3 = null;
                      if (reportFailures === 0) {
                        matchFailed("\" and is all-in\"");
                      }
                    }
                    result3 = result3 !== null ? result3 : "";
                    if (result3 !== null) {
                      result0 = [result0, result1, result2, result3];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, v, isAllin) { return { tag:"call", value:v, isAllin:(isAllin != false)}; })(pos0.offset, pos0.line, pos0.column, result0[2], result0[3]);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
              if (result0 === null) {
                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 6) === "raises") {
                  result0 = "raises";
                  advance(pos, 6);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"raises\"");
                  }
                }
                if (result0 !== null) {
                  result1 = parse_wsNlStream();
                  if (result1 !== null) {
                    result2 = parse_value();
                    if (result2 !== null) {
                      if (input.substr(pos.offset, 4) === " to ") {
                        result3 = " to ";
                        advance(pos, 4);
                      } else {
                        result3 = null;
                        if (reportFailures === 0) {
                          matchFailed("\" to \"");
                        }
                      }
                      if (result3 !== null) {
                        result4 = parse_value();
                        if (result4 !== null) {
                          if (input.substr(pos.offset, 14) === " and is all-in") {
                            result5 = " and is all-in";
                            advance(pos, 14);
                          } else {
                            result5 = null;
                            if (reportFailures === 0) {
                              matchFailed("\" and is all-in\"");
                            }
                          }
                          result5 = result5 !== null ? result5 : "";
                          if (result5 !== null) {
                            result6 = parse_isCapped();
                            result6 = result6 !== null ? result6 : "";
                            if (result6 !== null) {
                              result0 = [result0, result1, result2, result3, result4, result5, result6];
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
                if (result0 !== null) {
                  result0 = (function(offset, line, column, v, v2, isAllin, isCapped) { return { tag:"raise", raised:v, to:v2, isAllin:(isAllin != false), isCapped:isCapped}; })(pos0.offset, pos0.line, pos0.column, result0[2], result0[4], result0[5], result0[6]);
                }
                if (result0 === null) {
                  pos = clone(pos0);
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_action() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_username();
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 58) {
            result1 = ":";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\":\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_wsNlStream();
            if (result2 !== null) {
              result3 = parse_action_atom();
              if (result3 !== null) {
                result4 = parse_wsNlStream();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name, a) { return { tag:"action", user:name, action:a}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.substr(pos.offset, 14) === "Uncalled bet (") {
            result0 = "Uncalled bet (";
            advance(pos, 14);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"Uncalled bet (\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_value();
            if (result1 !== null) {
              if (input.substr(pos.offset, 14) === ") returned to ") {
                result2 = ") returned to ";
                advance(pos, 14);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\") returned to \"");
                }
              }
              if (result2 !== null) {
                result3 = parse_username();
                if (result3 !== null) {
                  result4 = parse_wsNlStream();
                  if (result4 !== null) {
                    result0 = [result0, result1, result2, result3, result4];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, v, name) { return { tag: "uncalled", value:v, to:name}; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[3]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_username();
            if (result0 !== null) {
              if (input.substr(pos.offset, 19) === ": doesn't show hand") {
                result1 = ": doesn't show hand";
                advance(pos, 19);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\": doesn't show hand\"");
                }
              }
              if (result1 !== null) {
                result2 = parse_wsNlStream();
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, name) { return { tag:"not_shows", user:name }; })(pos0.offset, pos0.line, pos0.column, result0[0]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              result0 = parse_username();
              if (result0 !== null) {
                if (input.substr(pos.offset, 12) === ": mucks hand") {
                  result1 = ": mucks hand";
                  advance(pos, 12);
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\": mucks hand\"");
                  }
                }
                if (result1 !== null) {
                  result2 = parse_wsNlStream();
                  if (result2 !== null) {
                    result0 = [result0, result1, result2];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, name) { return { tag:"mucks", user:name }; })(pos0.offset, pos0.line, pos0.column, result0[0]);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
              if (result0 === null) {
                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_username();
                if (result0 !== null) {
                  if (input.substr(pos.offset, 8) === ": shows ") {
                    result1 = ": shows ";
                    advance(pos, 8);
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed("\": shows \"");
                    }
                  }
                  if (result1 !== null) {
                    result2 = parse_board();
                    if (result2 !== null) {
                      if (input.charCodeAt(pos.offset) === 32) {
                        result3 = " ";
                        advance(pos, 1);
                      } else {
                        result3 = null;
                        if (reportFailures === 0) {
                          matchFailed("\" \"");
                        }
                      }
                      if (result3 !== null) {
                        result4 = [];
                        pos2 = clone(pos);
                        pos3 = clone(pos);
                        reportFailures++;
                        result5 = parse_nl();
                        reportFailures--;
                        if (result5 === null) {
                          result5 = "";
                        } else {
                          result5 = null;
                          pos = clone(pos3);
                        }
                        if (result5 !== null) {
                          if (input.length > pos.offset) {
                            result6 = input.charAt(pos.offset);
                            advance(pos, 1);
                          } else {
                            result6 = null;
                            if (reportFailures === 0) {
                              matchFailed("any character");
                            }
                          }
                          if (result6 !== null) {
                            result5 = [result5, result6];
                          } else {
                            result5 = null;
                            pos = clone(pos2);
                          }
                        } else {
                          result5 = null;
                          pos = clone(pos2);
                        }
                        while (result5 !== null) {
                          result4.push(result5);
                          pos2 = clone(pos);
                          pos3 = clone(pos);
                          reportFailures++;
                          result5 = parse_nl();
                          reportFailures--;
                          if (result5 === null) {
                            result5 = "";
                          } else {
                            result5 = null;
                            pos = clone(pos3);
                          }
                          if (result5 !== null) {
                            if (input.length > pos.offset) {
                              result6 = input.charAt(pos.offset);
                              advance(pos, 1);
                            } else {
                              result6 = null;
                              if (reportFailures === 0) {
                                matchFailed("any character");
                              }
                            }
                            if (result6 !== null) {
                              result5 = [result5, result6];
                            } else {
                              result5 = null;
                              pos = clone(pos2);
                            }
                          } else {
                            result5 = null;
                            pos = clone(pos2);
                          }
                        }
                        if (result4 !== null) {
                          result5 = parse_wsNlStream();
                          if (result5 !== null) {
                            result0 = [result0, result1, result2, result3, result4, result5];
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
                if (result0 !== null) {
                  result0 = (function(offset, line, column, name, hole, rest) { return { tag:"shows", user:name, cards:hole, rest:rest.map(function(e){ return e[1];}).join('')}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[4]);
                }
                if (result0 === null) {
                  pos = clone(pos0);
                }
                if (result0 === null) {
                  pos0 = clone(pos);
                  pos1 = clone(pos);
                  result0 = parse_username();
                  if (result0 !== null) {
                    if (input.substr(pos.offset, 8) === ": shows ") {
                      result1 = ": shows ";
                      advance(pos, 8);
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed("\": shows \"");
                      }
                    }
                    if (result1 !== null) {
                      result2 = parse_board();
                      if (result2 !== null) {
                        result3 = parse_wsNlStream();
                        if (result3 !== null) {
                          result0 = [result0, result1, result2, result3];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                  if (result0 !== null) {
                    result0 = (function(offset, line, column, name, hole) { return { tag:"shows", user:name, cards:hole}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
                  }
                  if (result0 === null) {
                    pos = clone(pos0);
                  }
                  if (result0 === null) {
                    pos0 = clone(pos);
                    pos1 = clone(pos);
                    result0 = parse_username();
                    if (result0 !== null) {
                      if (input.substr(pos.offset, 10) === ": sits out") {
                        result1 = ": sits out";
                        advance(pos, 10);
                      } else {
                        result1 = null;
                        if (reportFailures === 0) {
                          matchFailed("\": sits out\"");
                        }
                      }
                      if (result1 !== null) {
                        result2 = parse_wsNlStream();
                        if (result2 !== null) {
                          result0 = [result0, result1, result2];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                    if (result0 !== null) {
                      result0 = (function(offset, line, column, name) { return { tag:"sits_out", user:name }; })(pos0.offset, pos0.line, pos0.column, result0[0]);
                    }
                    if (result0 === null) {
                      pos = clone(pos0);
                    }
                    if (result0 === null) {
                      pos0 = clone(pos);
                      pos1 = clone(pos);
                      result0 = parse_username();
                      if (result0 !== null) {
                        if (input.substr(pos.offset, 16) === ": is sitting out") {
                          result1 = ": is sitting out";
                          advance(pos, 16);
                        } else {
                          result1 = null;
                          if (reportFailures === 0) {
                            matchFailed("\": is sitting out\"");
                          }
                        }
                        if (result1 !== null) {
                          result2 = parse_wsNlStream();
                          if (result2 !== null) {
                            result0 = [result0, result1, result2];
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                      if (result0 !== null) {
                        result0 = (function(offset, line, column, name) { return { tag:"sitting_out", user:name }; })(pos0.offset, pos0.line, pos0.column, result0[0]);
                      }
                      if (result0 === null) {
                        pos = clone(pos0);
                      }
                      if (result0 === null) {
                        pos0 = clone(pos);
                        pos1 = clone(pos);
                        result0 = parse_username();
                        if (result0 !== null) {
                          if (input.substr(pos.offset, 2) === ", ") {
                            result1 = ", ";
                            advance(pos, 2);
                          } else {
                            result1 = null;
                            if (reportFailures === 0) {
                              matchFailed("\", \"");
                            }
                          }
                          if (result1 !== null) {
                            result2 = parse_stringLiteral();
                            if (result2 !== null) {
                              result3 = parse_wsNlStream();
                              if (result3 !== null) {
                                result0 = [result0, result1, result2, result3];
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                        if (result0 !== null) {
                          result0 = (function(offset, line, column, name, said) {
                        			// (1)
                        			var li = name.lastIndexOf("said");
                        			if(li > -1 && li === name.length - 4 /*length of "said"*/ ){
                        				return { tag:"said", user:name.substring(0, li - 1).trimRight(), said:said };
                        			}
                        			
                        			throw new Error("Invalid action! Matched '" + name + "' in (name:username \", \" said:stringLiteral wsNlStream) (" + line + ", " + column + ")");
                        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
                        }
                        if (result0 === null) {
                          pos = clone(pos0);
                        }
                        if (result0 === null) {
                          pos0 = clone(pos);
                          pos1 = clone(pos);
                          result0 = parse_username();
                          if (result0 !== null) {
                            result1 = parse_wsNlStream();
                            if (result1 !== null) {
                              result0 = [result0, result1];
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                          if (result0 !== null) {
                            result0 = (function(offset, line, column, name) {
                          			// (1)
                          
                          			var li = -1;
                          			for(var k in usernameTests){
                          				with(usernameTests[k]){
                          					li = name.lastIndexOf(str);
                          					if(li > -1 && li === name.length - str.length){
                          						return toRet( name.substring(0, li - 1).trimRight() );
                          					}
                          				}
                          			}
                          
                          			for(var k in usernameRegexes){
                          				with(usernameRegexes[k]){
                          					var r = toRet(name.match(pattern), name);
                          					if(r !== null)
                          						return r;
                          				}
                          			}
                          			
                          			throw new Error("Invalid action! Matched '" + name + "' in (name:username wsNlStream) at (" + line + ", " + column + ")");
                          		})(pos0.offset, pos0.line, pos0.column, result0[0]);
                          }
                          if (result0 === null) {
                            pos = clone(pos0);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_streetHeader() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 4) === "*** ") {
          result0 = "*** ";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"*** \"");
          }
        }
        if (result0 !== null) {
          result1 = parse_streetName();
          if (result1 !== null) {
            if (input.substr(pos.offset, 4) === " ***") {
              result2 = " ***";
              advance(pos, 4);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\" ***\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) { return name; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_streetName() {
        var result0;
        
        if (input.substr(pos.offset, 10) === "HOLE CARDS") {
          result0 = "HOLE CARDS";
          advance(pos, 10);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"HOLE CARDS\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 4) === "FLOP") {
            result0 = "FLOP";
            advance(pos, 4);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"FLOP\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos.offset, 4) === "TURN") {
              result0 = "TURN";
              advance(pos, 4);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"TURN\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos.offset, 5) === "RIVER") {
                result0 = "RIVER";
                advance(pos, 5);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"RIVER\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos.offset, 9) === "SHOW DOWN") {
                  result0 = "SHOW DOWN";
                  advance(pos, 9);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"SHOW DOWN\"");
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_street() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_streetHeader();
        if (result0 !== null) {
          result1 = parse_wsNlStream();
          if (result1 !== null) {
            result2 = parse_boardlist();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = [];
              result4 = parse_action();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_action();
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name, board, actions) { return { tag:"street", name:name, board:board, actions:actions }; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_summary_board() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 6) === "Board ") {
          result0 = "Board ";
          advance(pos, 6);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"Board \"");
          }
        }
        if (result0 !== null) {
          result1 = parse_board();
          if (result1 !== null) {
            result2 = parse_wsNlStream();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, board) { return board; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_mainPot() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 10) === " Main pot ") {
          result0 = " Main pot ";
          advance(pos, 10);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\" Main pot \"");
          }
        }
        if (result0 !== null) {
          result1 = parse_value();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 46) {
              result2 = ".";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\".\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, main) { return main; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_sidePot() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 10) === " Side pot ") {
          result0 = " Side pot ";
          advance(pos, 10);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\" Side pot \"");
          }
        }
        if (result0 !== null) {
          result1 = parse_value();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 46) {
              result2 = ".";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\".\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, side) { return side; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_potInfoLeft() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 10) === "Total pot ") {
          result0 = "Total pot ";
          advance(pos, 10);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"Total pot \"");
          }
        }
        if (result0 !== null) {
          result1 = parse_value();
          if (result1 !== null) {
            result2 = parse_mainPot();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_sidePot();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pot, main, side) {
        			return {
        				pot:	pot,
        				main:	main,
        				side: side
        			};
        		})(pos0.offset, pos0.line, pos0.column, result0[1], result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_potInfo() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_potInfoLeft();
        if (result0 !== null) {
          if (input.substr(pos.offset, 8) === " | Rake ") {
            result1 = " | Rake ";
            advance(pos, 8);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\" | Rake \"");
            }
          }
          if (result1 !== null) {
            result2 = parse_value();
            if (result2 !== null) {
              result3 = parse_wsNlStream();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, left, rake) {
        			return {
        				pot: 	left.pot,
        				main:	left.main,
        				side:	left.side,
        				rake:	rake
        			};
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_summaryHeader() {
        var result0;
        
        if (input.substr(pos.offset, 15) === "*** SUMMARY ***") {
          result0 = "*** SUMMARY ***";
          advance(pos, 15);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"*** SUMMARY ***\"");
          }
        }
        return result0;
      }
      
      function parse_summary() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10;
        var pos0, pos1, pos2, pos3, pos4;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_summaryHeader();
        if (result0 !== null) {
          result1 = parse_wsNlStream();
          if (result1 !== null) {
            result2 = parse_potInfo();
            if (result2 !== null) {
              result3 = parse_summary_board();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                pos2 = clone(pos);
                if (input.substr(pos.offset, 5) === "Seat ") {
                  result5 = "Seat ";
                  advance(pos, 5);
                } else {
                  result5 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"Seat \"");
                  }
                }
                if (result5 !== null) {
                  result6 = parse_number();
                  if (result6 !== null) {
                    if (input.charCodeAt(pos.offset) === 58) {
                      result7 = ":";
                      advance(pos, 1);
                    } else {
                      result7 = null;
                      if (reportFailures === 0) {
                        matchFailed("\":\"");
                      }
                    }
                    if (result7 !== null) {
                      result8 = [];
                      pos3 = clone(pos);
                      pos4 = clone(pos);
                      reportFailures++;
                      result9 = parse_nl();
                      reportFailures--;
                      if (result9 === null) {
                        result9 = "";
                      } else {
                        result9 = null;
                        pos = clone(pos4);
                      }
                      if (result9 !== null) {
                        if (input.length > pos.offset) {
                          result10 = input.charAt(pos.offset);
                          advance(pos, 1);
                        } else {
                          result10 = null;
                          if (reportFailures === 0) {
                            matchFailed("any character");
                          }
                        }
                        if (result10 !== null) {
                          result9 = [result9, result10];
                        } else {
                          result9 = null;
                          pos = clone(pos3);
                        }
                      } else {
                        result9 = null;
                        pos = clone(pos3);
                      }
                      while (result9 !== null) {
                        result8.push(result9);
                        pos3 = clone(pos);
                        pos4 = clone(pos);
                        reportFailures++;
                        result9 = parse_nl();
                        reportFailures--;
                        if (result9 === null) {
                          result9 = "";
                        } else {
                          result9 = null;
                          pos = clone(pos4);
                        }
                        if (result9 !== null) {
                          if (input.length > pos.offset) {
                            result10 = input.charAt(pos.offset);
                            advance(pos, 1);
                          } else {
                            result10 = null;
                            if (reportFailures === 0) {
                              matchFailed("any character");
                            }
                          }
                          if (result10 !== null) {
                            result9 = [result9, result10];
                          } else {
                            result9 = null;
                            pos = clone(pos3);
                          }
                        } else {
                          result9 = null;
                          pos = clone(pos3);
                        }
                      }
                      if (result8 !== null) {
                        result9 = parse_wsNlStream();
                        if (result9 !== null) {
                          result5 = [result5, result6, result7, result8, result9];
                        } else {
                          result5 = null;
                          pos = clone(pos2);
                        }
                      } else {
                        result5 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result5 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result5 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result5 = null;
                  pos = clone(pos2);
                }
                if (result5 !== null) {
                  result4 = [];
                  while (result5 !== null) {
                    result4.push(result5);
                    pos2 = clone(pos);
                    if (input.substr(pos.offset, 5) === "Seat ") {
                      result5 = "Seat ";
                      advance(pos, 5);
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"Seat \"");
                      }
                    }
                    if (result5 !== null) {
                      result6 = parse_number();
                      if (result6 !== null) {
                        if (input.charCodeAt(pos.offset) === 58) {
                          result7 = ":";
                          advance(pos, 1);
                        } else {
                          result7 = null;
                          if (reportFailures === 0) {
                            matchFailed("\":\"");
                          }
                        }
                        if (result7 !== null) {
                          result8 = [];
                          pos3 = clone(pos);
                          pos4 = clone(pos);
                          reportFailures++;
                          result9 = parse_nl();
                          reportFailures--;
                          if (result9 === null) {
                            result9 = "";
                          } else {
                            result9 = null;
                            pos = clone(pos4);
                          }
                          if (result9 !== null) {
                            if (input.length > pos.offset) {
                              result10 = input.charAt(pos.offset);
                              advance(pos, 1);
                            } else {
                              result10 = null;
                              if (reportFailures === 0) {
                                matchFailed("any character");
                              }
                            }
                            if (result10 !== null) {
                              result9 = [result9, result10];
                            } else {
                              result9 = null;
                              pos = clone(pos3);
                            }
                          } else {
                            result9 = null;
                            pos = clone(pos3);
                          }
                          while (result9 !== null) {
                            result8.push(result9);
                            pos3 = clone(pos);
                            pos4 = clone(pos);
                            reportFailures++;
                            result9 = parse_nl();
                            reportFailures--;
                            if (result9 === null) {
                              result9 = "";
                            } else {
                              result9 = null;
                              pos = clone(pos4);
                            }
                            if (result9 !== null) {
                              if (input.length > pos.offset) {
                                result10 = input.charAt(pos.offset);
                                advance(pos, 1);
                              } else {
                                result10 = null;
                                if (reportFailures === 0) {
                                  matchFailed("any character");
                                }
                              }
                              if (result10 !== null) {
                                result9 = [result9, result10];
                              } else {
                                result9 = null;
                                pos = clone(pos3);
                              }
                            } else {
                              result9 = null;
                              pos = clone(pos3);
                            }
                          }
                          if (result8 !== null) {
                            result9 = parse_wsNlStream();
                            if (result9 !== null) {
                              result5 = [result5, result6, result7, result8, result9];
                            } else {
                              result5 = null;
                              pos = clone(pos2);
                            }
                          } else {
                            result5 = null;
                            pos = clone(pos2);
                          }
                        } else {
                          result5 = null;
                          pos = clone(pos2);
                        }
                      } else {
                        result5 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result5 = null;
                      pos = clone(pos2);
                    }
                  }
                } else {
                  result4 = null;
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pot, b) {
        			return {
        				tag	: "summary",
        				potInfo: pot,
        				board	: (b === "" ? null : b )
        			};
        		})(pos0.offset, pos0.line, pos0.column, result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_preflopAction() {
        var result0;
        
        result0 = parse_postSBBB();
        if (result0 === null) {
          result0 = parse_postSBlind();
          if (result0 === null) {
            result0 = parse_postBBlind();
            if (result0 === null) {
              result0 = parse_postAnte();
              if (result0 === null) {
                result0 = parse_action();
              }
            }
          }
        }
        return result0;
      }
      
      function parse_preflop() {
        var result0, result1;
        
        result0 = [];
        result1 = parse_preflopAction();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_preflopAction();
        }
        return result0;
      }
      
      function parse_hand() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_handPresentation();
        if (result0 !== null) {
          result1 = parse_tablePresentation();
          if (result1 !== null) {
            result3 = parse_seatPresentation();
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_seatPresentation();
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result3 = parse_preflop();
              if (result3 !== null) {
                result4 = [];
                result5 = parse_street();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_street();
                }
                if (result4 !== null) {
                  result5 = parse_summary();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, hand, table, seats, prfl, sts, summ) {
        			return {
        				tag		: "hand",
        				info		: hand,
        				table		: table,
        				seats		: seats,
        				streets	: (sts.push(prfl), sts),
        				summary	: summ
        			};
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3], result0[4], result0[5]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_game() {
        var result0;
        
        if (input.substr(pos.offset, 16) === "Hold'em No Limit") {
          result0 = "Hold'em No Limit";
          advance(pos, 16);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"Hold'em No Limit\"");
          }
        }
        return result0;
      }
      
      function parse_stringLiteral() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 34) {
          result0 = "\"";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          pos3 = clone(pos);
          reportFailures++;
          result2 = parse_nl();
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = clone(pos3);
          }
          if (result2 !== null) {
            if (input.length > pos.offset) {
              result3 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("any character");
              }
            }
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            pos3 = clone(pos);
            reportFailures++;
            result2 = parse_nl();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = clone(pos3);
            }
            if (result2 !== null) {
              if (input.length > pos.offset) {
                result3 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("any character");
                }
              }
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, c) { 
        			var s = c.map(function(e){ return e[1];}).join('').trimRight(); 
        			return s.substr(0, s.lastIndexOf('"')); 
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_currency() {
        var result0;
        
        if (input.substr(pos.offset, 3) === "USD") {
          result0 = "USD";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"USD\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 3) === "EUR") {
            result0 = "EUR";
            advance(pos, 3);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"EUR\"");
            }
          }
        }
        return result0;
      }
      
      function parse_currencySymbol() {
        var result0;
        
        if (input.charCodeAt(pos.offset) === 36) {
          result0 = "$";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"$\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos.offset) === 8364) {
            result0 = "\u20AC";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\u20AC\"");
            }
          }
        }
        return result0;
      }
      
      function parse_stakes() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_value();
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 47) {
            result1 = "/";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"/\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_value();
            if (result2 !== null) {
              if (input.substr(pos.offset, 3) === " - ") {
                result3 = " - ";
                advance(pos, 3);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\" - \"");
                }
              }
              if (result3 !== null) {
                result4 = parse_value();
                if (result4 !== null) {
                  if (input.substr(pos.offset, 8) === " Cap -  ") {
                    result5 = " Cap -  ";
                    advance(pos, 8);
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\" Cap -  \"");
                    }
                  }
                  if (result5 !== null) {
                    result6 = parse_currency();
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, s, b, cap, c) { return { small:s, big:b, cap:cap, currency:c}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[4], result0[6]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_value();
          if (result0 !== null) {
            if (input.charCodeAt(pos.offset) === 47) {
              result1 = "/";
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"/\"");
              }
            }
            if (result1 !== null) {
              result2 = parse_value();
              if (result2 !== null) {
                if (input.charCodeAt(pos.offset) === 32) {
                  result3 = " ";
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\" \"");
                  }
                }
                if (result3 !== null) {
                  result4 = parse_currency();
                  if (result4 !== null) {
                    result0 = [result0, result1, result2, result3, result4];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, s, b, c) { return { small:s, big:b, currency:c}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[4]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_CCusername() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        result1 = parse_usernamechar();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_usernamechar();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, cs) { return cs.join('').trimRight(); })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_username() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        pos2 = clone(pos);
        reportFailures++;
        result0 = parse_streetHeader();
        if (result0 === null) {
          result0 = parse_summaryHeader();
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = clone(pos2);
        }
        if (result0 !== null) {
          result1 = parse_CCusername();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, user) { return user; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_usernamechar() {
        var result0;
        
        if (/^[a-zA-Z0-9!_\u20AC$%@#.\-=*+|\/><&\xE4\xEB\xEF\xF6\xFC\xE3\u1EBD\u0129\xF5\u0169\xE0\xE8\xEC\xF2\xF9\xE1\xE9\xED\xF3\xFA\xE2\xEA\xEE\xF4\xFB\xC4\xCB\xCF\xD6\xDC\xC3\u1EBC\u0128\xD5\u0168\xC0\xC8\xCC\xD2\xD9\xC1\xC9\xCD\xD3\xDA\xC2\xCA\xCE\xD4\xDB\xE7\xC7\xE5\xE6\xC6\xF8\xA4?()^`\xB4[\] ]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[a-zA-Z0-9!_\\u20AC$%@#.\\-=*+|\\/><&\\xE4\\xEB\\xEF\\xF6\\xFC\\xE3\\u1EBD\\u0129\\xF5\\u0169\\xE0\\xE8\\xEC\\xF2\\xF9\\xE1\\xE9\\xED\\xF3\\xFA\\xE2\\xEA\\xEE\\xF4\\xFB\\xC4\\xCB\\xCF\\xD6\\xDC\\xC3\\u1EBC\\u0128\\xD5\\u0168\\xC0\\xC8\\xCC\\xD2\\xD9\\xC1\\xC9\\xCD\\xD3\\xDA\\xC2\\xCA\\xCE\\xD4\\xDB\\xE7\\xC7\\xE5\\xE6\\xC6\\xF8\\xA4?()^`\\xB4[\\] ]");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos.offset) === 34) {
            result0 = "\"";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\"\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos.offset) === 39) {
              result0 = "'";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"'\"");
              }
            }
          }
        }
        return result0;
      }
      
      function parse_tablename() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        result1 = parse_tablenamechar();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_tablenamechar();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, cs) { return cs.join('').trimRight(); })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_tablenamechar() {
        var result0;
        
        if (/^[a-zA-Z0-9\- ]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[a-zA-Z0-9\\- ]");
          }
        }
        return result0;
      }
      
      function parse_digits() {
        var result0;
        
        if (/^[0-9]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        return result0;
      }
      
      function parse_number() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        result1 = parse_digits();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_digits();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, d) { return new Number(d.join('')); })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_value() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_currencySymbol();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result2 = parse_digits();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_digits();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 46) {
              result2 = ".";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\".\"");
              }
            }
            if (result2 !== null) {
              result4 = parse_digits();
              if (result4 !== null) {
                result3 = [];
                while (result4 !== null) {
                  result3.push(result4);
                  result4 = parse_digits();
                }
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, s, d, d2) { return new Number(d.join('') + '.' + d2.join('')); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_currencySymbol();
          result0 = result0 !== null ? result0 : "";
          if (result0 !== null) {
            result1 = parse_number();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, s, n) { return n; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_wsNlStream() {
        var result0, result1;
        
        result0 = [];
        result1 = parse_wsNl();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_wsNl();
        }
        return result0;
      }
      
      function parse_wsNl() {
        var result0;
        
        result0 = parse_ws();
        if (result0 === null) {
          result0 = parse_nl();
        }
        return result0;
      }
      
      function parse_ws() {
        var result0;
        
        if (input.charCodeAt(pos.offset) === 32) {
          result0 = " ";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\" \"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos.offset) === 9) {
            result0 = "\t";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\t\"");
            }
          }
        }
        return result0;
      }
      
      function parse_nl() {
        var result0;
        
        if (input.charCodeAt(pos.offset) === 10) {
          result0 = "\n";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\n\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos.offset) === 13) {
            result0 = "\r";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\r\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos.offset, 2) === "\r\n") {
              result0 = "\r\n";
              advance(pos, 2);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\r\\n\"");
              }
            }
          }
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      
      
      	//this.parsed = {};
      	//this.parsed.__proto__ = new (require('events').EventEmitter)();
      
      	//var parsed = this.parsed;
      
      	var seatPresentationRegexes = [
      			{ 
      				pattern	: new RegExp("\\([$€]([0-9]+(?:\\.[0-9]+)?) in chips\\)"), 
      				toRet		: function(result, seat, user){
      
      					if(result){
      						return {
      							seat  : seat,
      							user	: user.substring(0, result.index - 1).trimRight(),
      							stack	: new Number(result[1])
      						};
      					}
      					return null;
      				}
      			}
      		]; // seatPresentationRegexes
      
      	var usernameRegexes = [
      			{ 
      				pattern:new RegExp("collected [$€]([0-9]+(?:\\.[0-9]+)?) from pot"), 
      				toRet:function(result, name){
      					if(result){
      						return {
      							tag	: "collectsPot",
      							user	: name.substring(0, result.index - 1).trimRight(),
      							value	: new Number(result[1])
      						};
      					}
      					return null;
      				}
      			},
      			{ 
      				pattern:new RegExp("collected [$€]([0-9]+(?:\\.[0-9]+)?) from side pot"), 
      				toRet:function(result, name){
      					if(result){
      						return {
      							tag	: "collectsSidePot",
      							user	: name.substring(0, result.index - 1).trimRight(),
      							value	: new Number(result[1])
      						};
      					}
      					return null;
      				}
      			},
      			{ 
      				pattern:new RegExp("collected [$€]([0-9]+(?:\\.[0-9]+)?) from main pot"), 
      				toRet:function(result, name){
      					if(result){
      						return {
      							tag	: "collectsMainPot",
      							user	: name.substring(0, result.index - 1).trimRight(),
      							value	: new Number(result[1])
      						};
      					}
      					return null;
      				}
      			},
      			{
      				pattern:new RegExp("joins the table at seat #([0-9]+)"),
      				toRet:function(result, name){
      							if(result){
      								return {
      									tag	: "joins",
      									user	: name.substring(0, result.index - 1).trimRight(),
      									seat	: new Number(result[1])
      								};
      							}
      							return null;
      						}
      			}
      		];
      	
      	var usernameTests = [
      			{ str:"has timed out while disconnected", toRet:function( u ){ return { tag:"timeoutWhileDisc", user:u }}},
      			{ str:"has timed out while being disconnected", toRet:function( u ){ return { tag:"timeoutWhileDisc", user:u }}},
      			{ str:"leaves the table", toRet:function( u ){ return { tag:"leaves", user:u }}},
      			{ str:"will be allowed to play after the button", toRet:function( u ){ return { tag:"allowedAfterButton", user:u }}},
      			{ str:"was removed from the table for failing to post", toRet:function( u ){ return { tag:"removedAfterPostFail", user:u }}},
      			{ str:"is disconnected", toRet:function(u){ return { tag:"disconnected", user:u }}},
      			{ str:"has timed out", toRet:function(u){ return { tag:"timedOut", user:u }}},
      			{ str:"is connected", toRet:function(u){ return { tag:"connected", user:u }}}
      		];
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos.offset === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos.offset < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos.offset === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos.offset !== input.length) {
        var offset = Math.max(pos.offset, rightmostFailuresPos.offset);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = pos.offset > rightmostFailuresPos.offset ? pos : rightmostFailuresPos;
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
