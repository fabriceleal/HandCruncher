exports.parser = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "program": parse_program,
        "handRaw": parse_handRaw,
        "date": parse_date,
        "handPresentation": parse_handPresentation,
        "tableType": parse_tableType,
        "tablePresentation": parse_tablePresentation,
        "seatPresentation": parse_seatPresentation,
        "postSBlind": parse_postSBlind,
        "postBBlind": parse_postBBlind,
        "card": parse_card,
        "cardlist_tail": parse_cardlist_tail,
        "cardlist": parse_cardlist,
        "boardlist_tail": parse_boardlist_tail,
        "boardlist": parse_boardlist,
        "board": parse_board,
        "action_atom": parse_action_atom,
        "action": parse_action,
        "list_actions": parse_list_actions,
        "end": parse_end,
        "streetName": parse_streetName,
        "street": parse_street,
        "summary_board": parse_summary_board,
        "summary": parse_summary,
        "preflopAction": parse_preflopAction,
        "preflop": parse_preflop,
        "hand": parse_hand,
        "game": parse_game,
        "stakes": parse_stakes,
        "username": parse_username,
        "usernamechar": parse_usernamechar,
        "digits": parse_digits,
        "number": parse_number,
        "value": parse_value,
        "wsNlStream": parse_wsNlStream,
        "wsNl": parse_wsNl,
        "ws": parse_ws,
        "nl": parse_nl
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "program";
      }
      
      var pos = { offset: 0, line: 1, column: 1, seenCR: false };
      var reportFailures = 0;
      var rightmostFailuresPos = { offset: 0, line: 1, column: 1, seenCR: false };
      var rightmostFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function clone(object) {
        var result = {};
        for (var key in object) {
          result[key] = object[key];
        }
        return result;
      }
      
      function advance(pos, n) {
        var endOffset = pos.offset + n;
        
        for (var offset = pos.offset; offset < endOffset; offset++) {
          var ch = input.charAt(offset);
          if (ch === "\n") {
            if (!pos.seenCR) { pos.line++; }
            pos.column = 1;
            pos.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            pos.line++;
            pos.column = 1;
            pos.seenCR = true;
          } else {
            pos.column++;
            pos.seenCR = false;
          }
        }
        
        pos.offset += n;
      }
      
      function matchFailed(failure) {
        if (pos.offset < rightmostFailuresPos.offset) {
          return;
        }
        
        if (pos.offset > rightmostFailuresPos.offset) {
          rightmostFailuresPos = clone(pos);
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_program() {
        var cacheKey = "program@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_wsNlStream();
        if (result0 !== null) {
          result2 = parse_handRaw();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_handRaw();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, hands) { return hands; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_handRaw() {
        var cacheKey = "handRaw@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_hand();
        if (result0 !== null) {
          result1 = parse_wsNlStream();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, h) { return h;})(pos0.offset, pos0.line, pos0.column, result0[0]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_date() {
        var cacheKey = "date@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_number();
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 47) {
            result1 = "/";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"/\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_number();
            if (result2 !== null) {
              if (input.charCodeAt(pos.offset) === 47) {
                result3 = "/";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"/\"");
                }
              }
              if (result3 !== null) {
                result4 = parse_number();
                if (result4 !== null) {
                  if (input.charCodeAt(pos.offset) === 32) {
                    result5 = " ";
                    advance(pos, 1);
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\" \"");
                    }
                  }
                  if (result5 !== null) {
                    result6 = parse_number();
                    if (result6 !== null) {
                      if (input.charCodeAt(pos.offset) === 58) {
                        result7 = ":";
                        advance(pos, 1);
                      } else {
                        result7 = null;
                        if (reportFailures === 0) {
                          matchFailed("\":\"");
                        }
                      }
                      if (result7 !== null) {
                        result8 = parse_number();
                        if (result8 !== null) {
                          if (input.charCodeAt(pos.offset) === 58) {
                            result9 = ":";
                            advance(pos, 1);
                          } else {
                            result9 = null;
                            if (reportFailures === 0) {
                              matchFailed("\":\"");
                            }
                          }
                          if (result9 !== null) {
                            result10 = parse_number();
                            if (result10 !== null) {
                              if (input.substr(pos.offset, 3) === " ET") {
                                result11 = " ET";
                                advance(pos, 3);
                              } else {
                                result11 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\" ET\"");
                                }
                              }
                              if (result11 !== null) {
                                result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11];
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, year, month, day, hour, minute, second) { return { year:year, month:month, day:day, hour:hour, minute:minute, second:second}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[4], result0[6], result0[8], result0[10]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_handPresentation() {
        var cacheKey = "handPresentation@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 17) === "PokerStars Hand #") {
          result0 = "PokerStars Hand #";
          advance(pos, 17);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"PokerStars Hand #\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_number();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 58) {
              result2 = ":";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\":\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_wsNlStream();
              if (result3 !== null) {
                result4 = parse_game();
                if (result4 !== null) {
                  result5 = parse_wsNlStream();
                  if (result5 !== null) {
                    if (input.charCodeAt(pos.offset) === 40) {
                      result6 = "(";
                      advance(pos, 1);
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"(\"");
                      }
                    }
                    if (result6 !== null) {
                      result7 = parse_stakes();
                      if (result7 !== null) {
                        if (input.charCodeAt(pos.offset) === 41) {
                          result8 = ")";
                          advance(pos, 1);
                        } else {
                          result8 = null;
                          if (reportFailures === 0) {
                            matchFailed("\")\"");
                          }
                        }
                        if (result8 !== null) {
                          result9 = parse_wsNlStream();
                          if (result9 !== null) {
                            if (input.charCodeAt(pos.offset) === 45) {
                              result10 = "-";
                              advance(pos, 1);
                            } else {
                              result10 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"-\"");
                              }
                            }
                            if (result10 !== null) {
                              result11 = parse_wsNlStream();
                              if (result11 !== null) {
                                result12 = parse_date();
                                if (result12 !== null) {
                                  result13 = parse_wsNlStream();
                                  if (result13 !== null) {
                                    result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13];
                                  } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                  }
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, n, g, l, d) { return { number:n, game:g, stakes:l, date:d}; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[4], result0[7], result0[12]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_tableType() {
        var cacheKey = "tableType@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        if (input.substr(pos.offset, 5) === "6-max") {
          result0 = "6-max";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"6-max\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 6) === "10-max") {
            result0 = "10-max";
            advance(pos, 6);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"10-max\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos.offset, 5) === "2-max") {
              result0 = "2-max";
              advance(pos, 5);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"2-max\"");
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_tablePresentation() {
        var cacheKey = "tablePresentation@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 7) === "Table '") {
          result0 = "Table '";
          advance(pos, 7);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"Table '\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_username();
          if (result1 !== null) {
            if (input.substr(pos.offset, 2) === "' ") {
              result2 = "' ";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"' \"");
              }
            }
            if (result2 !== null) {
              result3 = parse_tableType();
              if (result3 !== null) {
                if (input.substr(pos.offset, 7) === " Seat #") {
                  result4 = " Seat #";
                  advance(pos, 7);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\" Seat #\"");
                  }
                }
                if (result4 !== null) {
                  result5 = parse_number();
                  if (result5 !== null) {
                    if (input.substr(pos.offset, 14) === " is the button") {
                      result6 = " is the button";
                      advance(pos, 14);
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("\" is the button\"");
                      }
                    }
                    if (result6 !== null) {
                      result7 = parse_wsNlStream();
                      if (result7 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, table, type, buttonseat) { return { table:table, buttonseat:buttonseat, type:type}; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[3], result0[5]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_seatPresentation() {
        var cacheKey = "seatPresentation@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 5) === "Seat ") {
          result0 = "Seat ";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"Seat \"");
          }
        }
        if (result0 !== null) {
          result1 = parse_number();
          if (result1 !== null) {
            if (input.substr(pos.offset, 2) === ": ") {
              result2 = ": ";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\": \"");
              }
            }
            if (result2 !== null) {
              result3 = parse_username();
              if (result3 !== null) {
                if (input.charCodeAt(pos.offset) === 40) {
                  result4 = "(";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"(\"");
                  }
                }
                if (result4 !== null) {
                  result5 = parse_value();
                  if (result5 !== null) {
                    if (input.substr(pos.offset, 10) === " in chips)") {
                      result6 = " in chips)";
                      advance(pos, 10);
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("\" in chips)\"");
                      }
                    }
                    if (result6 !== null) {
                      result7 = parse_wsNlStream();
                      if (result7 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, seat, u, stack) { return { seat:seat, name:u, stack:stack}; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[3], result0[5]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_postSBlind() {
        var cacheKey = "postSBlind@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_username();
        if (result0 !== null) {
          if (input.substr(pos.offset, 20) === ": posts small blind ") {
            result1 = ": posts small blind ";
            advance(pos, 20);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\": posts small blind \"");
            }
          }
          if (result1 !== null) {
            result2 = parse_value();
            if (result2 !== null) {
              result3 = parse_wsNlStream();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, u, v) { return { tag:"postSBlind", value:v, user:u }; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_postBBlind() {
        var cacheKey = "postBBlind@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_username();
        if (result0 !== null) {
          if (input.substr(pos.offset, 18) === ": posts big blind ") {
            result1 = ": posts big blind ";
            advance(pos, 18);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\": posts big blind \"");
            }
          }
          if (result1 !== null) {
            result2 = parse_value();
            if (result2 !== null) {
              result3 = parse_wsNlStream();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, u, v) { return { tag:"postBBlind", value:v, user:u }; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_card() {
        var cacheKey = "card@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (/^[2-9]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[2-9]");
          }
        }
        if (result0 === null) {
          if (/^[ATJQK]/.test(input.charAt(pos.offset))) {
            result0 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("[ATJQK]");
            }
          }
        }
        if (result0 !== null) {
          if (/^[schd]/.test(input.charAt(pos.offset))) {
            result1 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[schd]");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, rank, suit) { return { rank:rank, suit:suit}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_cardlist_tail() {
        var cacheKey = "cardlist_tail@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_card();
        if (result0 !== null) {
          result1 = parse_wsNlStream();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, t) { return t; })(pos0.offset, pos0.line, pos0.column, result0[0]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_cardlist() {
        var cacheKey = "cardlist@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_card();
        if (result0 !== null) {
          result1 = parse_wsNlStream();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_cardlist_tail();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_cardlist_tail();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, h, t) { return [h].concat(t); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_boardlist_tail() {
        var cacheKey = "boardlist_tail@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_boardlist();
        if (result0 !== null) {
          result1 = parse_wsNlStream();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, t) { return t; })(pos0.offset, pos0.line, pos0.column, result0[0]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_boardlist() {
        var cacheKey = "boardlist@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_board();
        if (result0 !== null) {
          result1 = parse_wsNlStream();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_boardlist_tail();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_boardlist_tail();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, h, t) { return [h].concat(t.reduce(function(i, t){ return (t.push(i), t); }, [])); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_board() {
        var cacheKey = "board@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 91) {
          result0 = "[";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"[\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_cardlist();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 93) {
              result2 = "]";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"]\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, h) { return h; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_action_atom() {
        var cacheKey = "action_atom@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 5) === "folds") {
          result0 = "folds";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"folds\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) { return { tag:"fold"}; })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          if (input.substr(pos.offset, 6) === "checks") {
            result0 = "checks";
            advance(pos, 6);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"checks\"");
            }
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column) { return { tag:"check"}; })(pos0.offset, pos0.line, pos0.column);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.substr(pos.offset, 5) === "bets ") {
              result0 = "bets ";
              advance(pos, 5);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"bets \"");
              }
            }
            if (result0 !== null) {
              result1 = parse_value();
              if (result1 !== null) {
                if (input.substr(pos.offset, 14) === " and is all-in") {
                  result2 = " and is all-in";
                  advance(pos, 14);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\" and is all-in\"");
                  }
                }
                result2 = result2 !== null ? result2 : "";
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, c, isAllin) { return { tag:"bet", value:c, isAllin:(isAllin != false)}; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              if (input.substr(pos.offset, 6) === "calls ") {
                result0 = "calls ";
                advance(pos, 6);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"calls \"");
                }
              }
              if (result0 !== null) {
                result1 = parse_value();
                if (result1 !== null) {
                  if (input.substr(pos.offset, 14) === " and is all-in") {
                    result2 = " and is all-in";
                    advance(pos, 14);
                  } else {
                    result2 = null;
                    if (reportFailures === 0) {
                      matchFailed("\" and is all-in\"");
                    }
                  }
                  result2 = result2 !== null ? result2 : "";
                  if (result2 !== null) {
                    result0 = [result0, result1, result2];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, v, isAllin) { return { tag:"call", value:v, isAllin:(isAllin != false)}; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
              if (result0 === null) {
                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 7) === "raises ") {
                  result0 = "raises ";
                  advance(pos, 7);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"raises \"");
                  }
                }
                if (result0 !== null) {
                  result1 = parse_value();
                  if (result1 !== null) {
                    if (input.substr(pos.offset, 4) === " to ") {
                      result2 = " to ";
                      advance(pos, 4);
                    } else {
                      result2 = null;
                      if (reportFailures === 0) {
                        matchFailed("\" to \"");
                      }
                    }
                    if (result2 !== null) {
                      result3 = parse_value();
                      if (result3 !== null) {
                        if (input.substr(pos.offset, 14) === " and is all-in") {
                          result4 = " and is all-in";
                          advance(pos, 14);
                        } else {
                          result4 = null;
                          if (reportFailures === 0) {
                            matchFailed("\" and is all-in\"");
                          }
                        }
                        result4 = result4 !== null ? result4 : "";
                        if (result4 !== null) {
                          result0 = [result0, result1, result2, result3, result4];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
                if (result0 !== null) {
                  result0 = (function(offset, line, column, v, v2, isAllin) { return { tag:"raise", raised:v, to:v2, isAllin:(isAllin != false)}; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[3], result0[4]);
                }
                if (result0 === null) {
                  pos = clone(pos0);
                }
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_action() {
        var cacheKey = "action@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_username();
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 58) {
            result1 = ":";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\":\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_wsNlStream();
            if (result2 !== null) {
              result3 = parse_action_atom();
              if (result3 !== null) {
                result4 = parse_wsNlStream();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name, a) { return { tag:"action", user:name, action:a}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.substr(pos.offset, 14) === "Uncalled bet (") {
            result0 = "Uncalled bet (";
            advance(pos, 14);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"Uncalled bet (\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_value();
            if (result1 !== null) {
              if (input.substr(pos.offset, 14) === ") returned to ") {
                result2 = ") returned to ";
                advance(pos, 14);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\") returned to \"");
                }
              }
              if (result2 !== null) {
                result3 = parse_username();
                if (result3 !== null) {
                  result4 = parse_wsNlStream();
                  if (result4 !== null) {
                    result0 = [result0, result1, result2, result3, result4];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, v, name) { return { tag: "uncalled", value:v, to:name}; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[3]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_username();
            if (result0 !== null) {
              if (input.substr(pos.offset, 19) === ": doesn't show hand") {
                result1 = ": doesn't show hand";
                advance(pos, 19);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\": doesn't show hand\"");
                }
              }
              if (result1 !== null) {
                result2 = parse_wsNlStream();
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, name) { return { tag:"mucks", user:name }; })(pos0.offset, pos0.line, pos0.column, result0[0]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              result0 = parse_username();
              if (result0 !== null) {
                if (input.substr(pos.offset, 10) === ": sits out") {
                  result1 = ": sits out";
                  advance(pos, 10);
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\": sits out\"");
                  }
                }
                if (result1 !== null) {
                  result2 = parse_wsNlStream();
                  if (result2 !== null) {
                    result0 = [result0, result1, result2];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, name) { return { tag:"sitsout", user:name }; })(pos0.offset, pos0.line, pos0.column, result0[0]);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
              if (result0 === null) {
                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_username();
                if (result0 !== null) {
                  result1 = parse_value();
                  if (result1 !== null) {
                    result2 = parse_wsNlStream();
                    if (result2 !== null) {
                      if (input.substr(pos.offset, 8) === "from pot") {
                        result3 = "from pot";
                        advance(pos, 8);
                      } else {
                        result3 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"from pot\"");
                        }
                      }
                      if (result3 !== null) {
                        result4 = parse_wsNlStream();
                        if (result4 !== null) {
                          result0 = [result0, result1, result2, result3, result4];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
                if (result0 !== null) {
                  result0 = (function(offset, line, column, name, v) {
                			// 
                			var li = name.lastIndexOf("collected");
                			if(li > -1 && li === name.length - 9 /*length of "collected"*/ ){
                				return { tag:"collects", user:name.substring(0, li - 1).trimRight(), value:v };
                			}
                			
                			throw new Error("Invalid action! Matched '" + name + "' (name:username v:value wsNlStream \"from pot\" wsNlStream)");
                		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
                }
                if (result0 === null) {
                  pos = clone(pos0);
                }
                if (result0 === null) {
                  pos0 = clone(pos);
                  pos1 = clone(pos);
                  result0 = parse_username();
                  if (result0 !== null) {
                    result1 = parse_wsNlStream();
                    if (result1 !== null) {
                      result0 = [result0, result1];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                  if (result0 !== null) {
                    result0 = (function(offset, line, column, name) {
                  			// This one is really wtf... the username can contain spaces, so
                  			// the string <username> leaves the table should be matched as a username, and then treated ... arg!!!
                  			var li = name.lastIndexOf("leaves the table");			
                  			if(li > -1 && li === name.length - 16 /*length of "leaves the table"*/ ){
                  				return { tag:"leaves", user: name.substring(0, li - 1).trimRight() };
                  			}
                  			
                  			throw new Error("Invalid action! Matched '" + name + "' in (name:username wsNlStream)");
                  		})(pos0.offset, pos0.line, pos0.column, result0[0]);
                  }
                  if (result0 === null) {
                    pos = clone(pos0);
                  }
                }
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_list_actions() {
        var cacheKey = "list_actions@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0;
        
        result0 = parse_end();
        if (result0 === null) {
          pos0 = clone(pos);
          result0 = parse_action();
          if (result0 !== null) {
            result1 = parse_list_actions();
            result1 = result1 !== null ? result1 : "";
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_end() {
        var cacheKey = "end@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        result0 = [];
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_streetName() {
        var cacheKey = "streetName@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        if (input.substr(pos.offset, 10) === "HOLE CARDS") {
          result0 = "HOLE CARDS";
          advance(pos, 10);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"HOLE CARDS\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 4) === "FLOP") {
            result0 = "FLOP";
            advance(pos, 4);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"FLOP\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos.offset, 4) === "TURN") {
              result0 = "TURN";
              advance(pos, 4);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"TURN\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos.offset, 5) === "RIVER") {
                result0 = "RIVER";
                advance(pos, 5);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"RIVER\"");
                }
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_street() {
        var cacheKey = "street@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 4) === "*** ") {
          result0 = "*** ";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"*** \"");
          }
        }
        if (result0 !== null) {
          result1 = parse_streetName();
          if (result1 !== null) {
            if (input.substr(pos.offset, 4) === " ***") {
              result2 = " ***";
              advance(pos, 4);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\" ***\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_wsNlStream();
              if (result3 !== null) {
                result4 = parse_boardlist();
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_action();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_action();
                  }
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name, board, actions) { return { tag:"street", name:name, board:board, actions:actions }; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[4], result0[5]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_summary_board() {
        var cacheKey = "summary_board@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 6) === "Board ") {
          result0 = "Board ";
          advance(pos, 6);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"Board \"");
          }
        }
        if (result0 !== null) {
          result1 = parse_board();
          if (result1 !== null) {
            result2 = parse_wsNlStream();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, board) { return board; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_summary() {
        var cacheKey = "summary@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14;
        var pos0, pos1, pos2, pos3, pos4;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 15) === "*** SUMMARY ***") {
          result0 = "*** SUMMARY ***";
          advance(pos, 15);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"*** SUMMARY ***\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_wsNlStream();
          if (result1 !== null) {
            if (input.substr(pos.offset, 10) === "Total pot ") {
              result2 = "Total pot ";
              advance(pos, 10);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"Total pot \"");
              }
            }
            if (result2 !== null) {
              result3 = parse_value();
              if (result3 !== null) {
                if (input.substr(pos.offset, 8) === " | Rake ") {
                  result4 = " | Rake ";
                  advance(pos, 8);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\" | Rake \"");
                  }
                }
                if (result4 !== null) {
                  result5 = parse_value();
                  if (result5 !== null) {
                    result6 = parse_wsNlStream();
                    if (result6 !== null) {
                      result7 = parse_summary_board();
                      result7 = result7 !== null ? result7 : "";
                      if (result7 !== null) {
                        pos2 = clone(pos);
                        if (input.substr(pos.offset, 5) === "Seat ") {
                          result9 = "Seat ";
                          advance(pos, 5);
                        } else {
                          result9 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"Seat \"");
                          }
                        }
                        if (result9 !== null) {
                          result10 = parse_number();
                          if (result10 !== null) {
                            if (input.charCodeAt(pos.offset) === 58) {
                              result11 = ":";
                              advance(pos, 1);
                            } else {
                              result11 = null;
                              if (reportFailures === 0) {
                                matchFailed("\":\"");
                              }
                            }
                            if (result11 !== null) {
                              result12 = [];
                              pos3 = clone(pos);
                              pos4 = clone(pos);
                              reportFailures++;
                              result13 = parse_nl();
                              reportFailures--;
                              if (result13 === null) {
                                result13 = "";
                              } else {
                                result13 = null;
                                pos = clone(pos4);
                              }
                              if (result13 !== null) {
                                if (input.length > pos.offset) {
                                  result14 = input.charAt(pos.offset);
                                  advance(pos, 1);
                                } else {
                                  result14 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("any character");
                                  }
                                }
                                if (result14 !== null) {
                                  result13 = [result13, result14];
                                } else {
                                  result13 = null;
                                  pos = clone(pos3);
                                }
                              } else {
                                result13 = null;
                                pos = clone(pos3);
                              }
                              while (result13 !== null) {
                                result12.push(result13);
                                pos3 = clone(pos);
                                pos4 = clone(pos);
                                reportFailures++;
                                result13 = parse_nl();
                                reportFailures--;
                                if (result13 === null) {
                                  result13 = "";
                                } else {
                                  result13 = null;
                                  pos = clone(pos4);
                                }
                                if (result13 !== null) {
                                  if (input.length > pos.offset) {
                                    result14 = input.charAt(pos.offset);
                                    advance(pos, 1);
                                  } else {
                                    result14 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("any character");
                                    }
                                  }
                                  if (result14 !== null) {
                                    result13 = [result13, result14];
                                  } else {
                                    result13 = null;
                                    pos = clone(pos3);
                                  }
                                } else {
                                  result13 = null;
                                  pos = clone(pos3);
                                }
                              }
                              if (result12 !== null) {
                                result13 = parse_wsNlStream();
                                if (result13 !== null) {
                                  result9 = [result9, result10, result11, result12, result13];
                                } else {
                                  result9 = null;
                                  pos = clone(pos2);
                                }
                              } else {
                                result9 = null;
                                pos = clone(pos2);
                              }
                            } else {
                              result9 = null;
                              pos = clone(pos2);
                            }
                          } else {
                            result9 = null;
                            pos = clone(pos2);
                          }
                        } else {
                          result9 = null;
                          pos = clone(pos2);
                        }
                        if (result9 !== null) {
                          result8 = [];
                          while (result9 !== null) {
                            result8.push(result9);
                            pos2 = clone(pos);
                            if (input.substr(pos.offset, 5) === "Seat ") {
                              result9 = "Seat ";
                              advance(pos, 5);
                            } else {
                              result9 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"Seat \"");
                              }
                            }
                            if (result9 !== null) {
                              result10 = parse_number();
                              if (result10 !== null) {
                                if (input.charCodeAt(pos.offset) === 58) {
                                  result11 = ":";
                                  advance(pos, 1);
                                } else {
                                  result11 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\":\"");
                                  }
                                }
                                if (result11 !== null) {
                                  result12 = [];
                                  pos3 = clone(pos);
                                  pos4 = clone(pos);
                                  reportFailures++;
                                  result13 = parse_nl();
                                  reportFailures--;
                                  if (result13 === null) {
                                    result13 = "";
                                  } else {
                                    result13 = null;
                                    pos = clone(pos4);
                                  }
                                  if (result13 !== null) {
                                    if (input.length > pos.offset) {
                                      result14 = input.charAt(pos.offset);
                                      advance(pos, 1);
                                    } else {
                                      result14 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("any character");
                                      }
                                    }
                                    if (result14 !== null) {
                                      result13 = [result13, result14];
                                    } else {
                                      result13 = null;
                                      pos = clone(pos3);
                                    }
                                  } else {
                                    result13 = null;
                                    pos = clone(pos3);
                                  }
                                  while (result13 !== null) {
                                    result12.push(result13);
                                    pos3 = clone(pos);
                                    pos4 = clone(pos);
                                    reportFailures++;
                                    result13 = parse_nl();
                                    reportFailures--;
                                    if (result13 === null) {
                                      result13 = "";
                                    } else {
                                      result13 = null;
                                      pos = clone(pos4);
                                    }
                                    if (result13 !== null) {
                                      if (input.length > pos.offset) {
                                        result14 = input.charAt(pos.offset);
                                        advance(pos, 1);
                                      } else {
                                        result14 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("any character");
                                        }
                                      }
                                      if (result14 !== null) {
                                        result13 = [result13, result14];
                                      } else {
                                        result13 = null;
                                        pos = clone(pos3);
                                      }
                                    } else {
                                      result13 = null;
                                      pos = clone(pos3);
                                    }
                                  }
                                  if (result12 !== null) {
                                    result13 = parse_wsNlStream();
                                    if (result13 !== null) {
                                      result9 = [result9, result10, result11, result12, result13];
                                    } else {
                                      result9 = null;
                                      pos = clone(pos2);
                                    }
                                  } else {
                                    result9 = null;
                                    pos = clone(pos2);
                                  }
                                } else {
                                  result9 = null;
                                  pos = clone(pos2);
                                }
                              } else {
                                result9 = null;
                                pos = clone(pos2);
                              }
                            } else {
                              result9 = null;
                              pos = clone(pos2);
                            }
                          }
                        } else {
                          result8 = null;
                        }
                        if (result8 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pot, rake, b) {
        			return {
        				tag	: "summary",
        				pot	: pot,
        				rake	: rake,
        				board	: (b === "" ? null : b )
        			};
        		})(pos0.offset, pos0.line, pos0.column, result0[3], result0[5], result0[7]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_preflopAction() {
        var cacheKey = "preflopAction@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        result0 = parse_postSBlind();
        if (result0 === null) {
          result0 = parse_postBBlind();
          if (result0 === null) {
            result0 = parse_action();
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_preflop() {
        var cacheKey = "preflop@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        
        result0 = [];
        result1 = parse_preflopAction();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_preflopAction();
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_hand() {
        var cacheKey = "hand@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_handPresentation();
        if (result0 !== null) {
          result1 = parse_tablePresentation();
          if (result1 !== null) {
            result3 = parse_seatPresentation();
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_seatPresentation();
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result3 = parse_preflop();
              if (result3 !== null) {
                result4 = [];
                result5 = parse_street();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_street();
                }
                if (result4 !== null) {
                  result5 = parse_summary();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, hand, table, seats, prfl, sts, summ) {
        			return {
        				tag		: "hand",
        				info		: hand,
        				table		: table,
        				seats		: seats,
        				streets	: (sts.push(prfl), sts),
        				summary	: summ
        			};
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3], result0[4], result0[5]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_game() {
        var cacheKey = "game@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        if (input.substr(pos.offset, 16) === "Hold'em No Limit") {
          result0 = "Hold'em No Limit";
          advance(pos, 16);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"Hold'em No Limit\"");
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_stakes() {
        var cacheKey = "stakes@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_value();
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 47) {
            result1 = "/";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"/\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_value();
            if (result2 !== null) {
              if (input.substr(pos.offset, 4) === " USD") {
                result3 = " USD";
                advance(pos, 4);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\" USD\"");
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, s, b) { return { small:s, big:b}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_username() {
        var cacheKey = "username@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        result1 = parse_usernamechar();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_usernamechar();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, cs) { return cs.join('').trimRight(); })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_usernamechar() {
        var cacheKey = "usernamechar@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        if (/^[a-zA-Z0-9!_ ]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[a-zA-Z0-9!_ ]");
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_digits() {
        var cacheKey = "digits@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        if (/^[0-9]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_number() {
        var cacheKey = "number@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        result1 = parse_digits();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_digits();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, d) { return new Number(d.join('')); })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_value() {
        var cacheKey = "value@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 36) {
          result0 = "$";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"$\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_digits();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_digits();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 46) {
              result2 = ".";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\".\"");
              }
            }
            if (result2 !== null) {
              result4 = parse_digits();
              if (result4 !== null) {
                result3 = [];
                while (result4 !== null) {
                  result3.push(result4);
                  result4 = parse_digits();
                }
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, d, d2) { return new Number(d.join('') + '.' + d2.join('')); })(pos0.offset, pos0.line, pos0.column, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.charCodeAt(pos.offset) === 36) {
            result0 = "$";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"$\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_number();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, n) { return n; })(pos0.offset, pos0.line, pos0.column, result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_wsNlStream() {
        var cacheKey = "wsNlStream@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        
        result0 = [];
        result1 = parse_wsNl();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_wsNl();
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_wsNl() {
        var cacheKey = "wsNl@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        result0 = parse_ws();
        if (result0 === null) {
          result0 = parse_nl();
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ws() {
        var cacheKey = "ws@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        if (/^[ \/w\/s\/t]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\/w\\/s\\/t]");
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_nl() {
        var cacheKey = "nl@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        if (input.charCodeAt(pos.offset) === 10) {
          result0 = "\n";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\n\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos.offset) === 13) {
            result0 = "\r";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\r\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos.offset, 2) === "\r\n") {
              result0 = "\r\n";
              advance(pos, 2);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\r\\n\"");
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos.offset === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos.offset < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos.offset === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos.offset !== input.length) {
        var offset = Math.max(pos.offset, rightmostFailuresPos.offset);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = pos.offset > rightmostFailuresPos.offset ? pos : rightmostFailuresPos;
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
